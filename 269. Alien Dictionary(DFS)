class Solution {
    HashMap<Character, List<Character>> cMap;
    HashMap<Character, Boolean> visited;
    StringBuilder res;
    public String alienOrder(String[] words) {
        cMap = new HashMap<>();
        for (String word : words) {
            for (char c : word.toCharArray()) {
                cMap.putIfAbsent(c, new ArrayList<>());
            }
        }
        
        for(int i = 0; i < words.length - 1; i++) {
            String word1 = words[i];
            String word2 = words[i + 1];
            int minLength = Math.min(word1.length(), word2.length());
            if (word1.length() > word2.length() && word1.startsWith(word2)){
                return "";
            }
            
            for (int j = 0; j < minLength; j++) {
                if (word1.charAt(j) != word2.charAt(j)) {
                    char key = word1.charAt(j);
                    char val = word2.charAt(j);
                    cMap.get(key).add(val);
                    break;
                }
            }
        }
        
        visited = new HashMap<Character, Boolean>();
        this.res = new StringBuilder();
        for (char c : cMap.keySet()) {
            if (dfs(c)) {
                return "";
            }
        }
        
        return res.reverse().toString();
    }
    
    private Boolean dfs(char c) {
        if (visited.keySet().contains(c)) {
            return visited.get(c);
        }
        
        visited.put(c, true);
        for (char nei : cMap.get(c)) {
            if (dfs(nei)) {
                return true;
            }
        }
        visited.put(c, false);
        res.append(c);
        return false;
    }
}
