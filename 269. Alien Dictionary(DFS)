class Solution {
    StringBuilder s = new StringBuilder();
    Map<Character, Boolean> visited = new HashMap<Character, Boolean>();;
    Map<Character, List<Character>> cMap = new HashMap<>();
    public String alienOrder(String[] words) { 
        
        for (String word : words) {
            for (char c : word.toCharArray()) {
                cMap.putIfAbsent(c, new ArrayList<>());
            }
        }
        
        for (int i = 1; i < words.length; i++) {
            String fst = words[i - 1];
            String snd = words[i];
            
            if (fst.length() > snd.length() && fst.startsWith(snd)) {
                return "";
            }
            // fst > snd
            int minLength = Math.min(fst.length(), snd.length());
            for (int j = 0; j < minLength; j++) {
                char c1 = fst.charAt(j);
                char c2 = snd.charAt(j);
                
                if (c1 != c2) {
                    cMap.get(c1).add(c2);
                    break;
                }
            }
        }
        
        for (char c : cMap.keySet()) {
            if (dfs(c)) {
                return "";
            }
        }
        
        return s.reverse().toString();
    }
    
    private Boolean dfs(char c) {
        if (visited.keySet().contains(c)) {
            return visited.get(c);
        }
        
        visited.put(c, true);
        for (char nei : cMap.get(c)) {
            if (dfs(nei)) {
                return true;
            }
        }
        visited.put(c, false);
        s.append(c);
        return false;
    }
}
