class Solution {
    List<List<Integer>> adjacencyList;
    Set<Integer> visited;
    public int countComponents(int n, int[][] edges) {
        adjacencyList = new ArrayList<>();
        visited = new HashSet<>();
        for (int i = 0; i < n; i++) {
            adjacencyList.add(new ArrayList<Integer>());
        }
        
        for (int[] edge : edges) {
            adjacencyList.get(edge[0]).add(edge[1]);
            adjacencyList.get(edge[1]).add(edge[0]);
        }
        
        int total = 0;
        dfs(0);
        total++;
        while(visited.size() != n) {
            int ni = findUnvisited(n);
            dfs(ni);
            total++;
        }
        return total;
    }
    
    private void dfs(int n) {
        if (visited.contains(n)) {
            return;
        }
        
        visited.add(n);
        for (int nei : adjacencyList.get(n)) {
            dfs(nei);
        }
    }
    
    private int findUnvisited(int n) {
        for (int i = 0; i < n; i++) {
            if (!visited.contains(i)) {
                return i;
            }
        }
        return -1;
    } 
}
