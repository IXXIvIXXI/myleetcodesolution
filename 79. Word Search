class Solution {
    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                
                    if (dfs(i, j, word, board, 0)) {
                        return true;
                    }
                
            }
        }
        
        return false;
    }
    
    private boolean dfs(int i, int j, String word, char[][] board, int index) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length) {
            return false;
        }
        
        if (word.charAt(index) != board[i][j]) {
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '@';
        boolean found = dfs(i - 1, j, word, board, index + 1) ||
                        dfs(i, j + 1, word, board, index + 1) ||
                        dfs(i + 1, j, word, board, index + 1) ||
                        dfs(i, j - 1, word, board, index + 1);
        board[i][j] = temp;
        
        return found;
    }
}
