class TrieNode {
    Map<Character, TrieNode> children = new HashMap();
    boolean isWord = false;
    public TrieNode() {}
}

class WordDictionary {
    TrieNode trie;
    
    public WordDictionary() {
        trie = new TrieNode();    
    }
    
    public void addWord(String word) {
        TrieNode curr = trie;
        
        for (char c : word.toCharArray()) {
            if (!curr.children.containsKey(c)) {
                curr.children.put(c, new TrieNode());
            }
            curr = curr.children.get(c);
        }
        curr.isWord = true;
    }
    
    public boolean search(String word) {
        return searchNode(word, trie);
    }
    
    private boolean searchNode(String word, TrieNode node) {
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (!node.children.containsKey(c)) {
                if (c == '.') {
                    for (char w : node.children.keySet()) {
                        TrieNode child = node.children.get(w);
                        if (searchNode(word.substring(i+1), child)) {
                            return true;
                        }
                    }
                }
                return false;
            }  else {
                node = node.children.get(c);
            }
        }
        
        return node.isWord;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
