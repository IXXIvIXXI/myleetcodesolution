/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        List<Integer> leftRes = new LinkedList<>();
        List<Integer> leaves = new LinkedList<>();
        List<Integer> rightRes = new LinkedList<>();
        preorder(root, leftRes, rightRes, leaves, 0);
        leftRes.addAll(leaves);
        leftRes.addAll(rightRes);
        return leftRes;
    }
    
    private int getLeftFlag(TreeNode root, int flag) {
        if (flag == 1 || flag == 0) {
            return 1;
        } else if (flag == 2 && root.right == null) { // left node on the right boundary
            return 2;
        }
        return 3;
    }
    
    private int getRightFlag(TreeNode root, int flag) {
        if (flag == 2 || flag == 0) {
            return 2;
        } else if (flag == 1 && root.left == null) { // right node on the left boundary
            return 1;
        }
        return 3;
    }
    
    private void preorder(TreeNode root, List<Integer> leftB, List<Integer> rightB, List<Integer> leaves, int flag) {
        if (root == null) return;
        if (flag == 1 || flag == 0) leftB.add(root.val);
        else if (flag == 2) rightB.add(0, root.val);
        else if (root.left == null && root.right == null) leaves.add(root.val);
        preorder(root.left, leftB, rightB, leaves, getLeftFlag(root, flag));
        preorder(root.right, leftB, rightB, leaves, getRightFlag(root, flag));
    }
}
