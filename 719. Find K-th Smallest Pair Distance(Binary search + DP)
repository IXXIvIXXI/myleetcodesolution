class Solution {
    // binary search + DP
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int minDist = 0;
        int maxDist = nums[nums.length - 1] - nums[0];
        
        while (minDist <= maxDist) {
            int mid = minDist + (maxDist - minDist) / 2;
            
            int left = 0;
            int right = 0;
            int count = 0;
            
            while (right < nums.length) { // use dp to find total pairs that are smaller than or equal to mid
                if (nums[right] - nums[left] > mid) {
                    left++;
                } else {
                    count += right - left;
                    right++;
                }
            }
            
            if (count >= k) {
                maxDist = mid - 1;
            } else {
                minDist = mid + 1;
            }
        }
        
        return minDist;
    }
}
