class Solution {
    public String minWindow(String s, String t) {
        if (s.length() == 0 || t.length() == 0) {
            return "";
        }
        
        int left = 0;
        int resLen = s.length() + 1;
        String res = "";
        int have = 0;
        int need = t.length();
        
        // a map that records numbers of needed character
        HashMap<Character, Integer> charM = new HashMap<Character, Integer>();
        for (int i = 0; i < t.length(); i++) {
            charM.put(t.charAt(i), charM.getOrDefault(t.charAt(i), 0) + 1);
        }
        
        for (int right = 0; right < s.length(); right++) {
            char curr = s.charAt(right);
            if (charM.keySet().contains(curr)) {
                charM.put(curr, charM.get(curr) - 1);
                if (charM.get(curr) >= 0) {
                    // increament the number of qualified characters
                    // if the amount is great than or equal 0
                    have++;
                }
            }
            
            while (have == need) {
                int length = right - left + 1;
                
                // update res is it's shorter
                if (length < resLen) {
                    resLen = length;
                    res = s.substring(left, right + 1);
                }
                
                // if the character is in set, remove it from the end of string
                if (charM.keySet().contains(s.charAt(left))) {
                    // increament the needed amount by 1
                    charM.put(s.charAt(left), charM.get(s.charAt(left)) + 1);
                    // if the amount is positive, decreament have because we need to add a new one
                    if (charM.get(s.charAt(left)) > 0) {
                        have--;
                    }
                }
                // increament left pointer
                left++;
            }
        }
        
        return res;
    }
}
