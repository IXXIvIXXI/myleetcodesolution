class Solution {
    int[][] DIRS = { {-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    public int getFood(char[][] grid) {
        int steps = 0;
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        Set<Pair<Integer, Integer>> visited = new HashSet<>();
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '*') q.offer(new Pair(i, j));
            }
        }
        
        q.offer(new Pair(-1, -1));
        
        while (!q.isEmpty()) {
            Pair<Integer, Integer> cur = q.poll();
            int row = cur.getKey();
            int col = cur.getValue();
            if (row == -1) {
                steps++;
                if (!q.isEmpty()) {
                    q.offer(new Pair(-1, -1));
                }
            } else if (!visited.add(cur)) continue; 
            else if (grid[row][col] == '#') {
                    return steps;  
            } else {
                    for (int[] dir : DIRS) {
                        int newRow = row + dir[0];
                        int newCol = col + dir[1];
                        
                        if (newRow < 0 || newRow >= grid.length || newCol < 0 || newCol >= grid[0].length)
                            continue;
                        
                        if (grid[newRow][newCol] != 'X') {
                            q.offer(new Pair(newRow, newCol));
                        }
                    }
            }
        }
        return -1;
    }
}
