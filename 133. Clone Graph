/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    HashMap<Node, Node> nodeMap = new HashMap<>();
    LinkedList<Node> nodeList = new LinkedList<>();
    
    public Node cloneGraph(Node node) {
        if (node == null) {
            return null;
        }
        nodeList.add(node);
        nodeMap.put(node, new Node(node.val));
        
        while (!nodeList.isEmpty()) {
            Node fst = nodeList.remove();
            
            for (Node n : fst.neighbors) {
                Node clone;
                if (!nodeMap.containsKey(n)) {
                    nodeList.add(n);
                    clone = new Node(n.val);
                    nodeMap.put(n, clone);
                } else {
                    clone = nodeMap.get(n);
                }
                nodeMap.get(fst).neighbors.add(clone);
            }
        }
        
        return nodeMap.get(node);
    }
    
    // dfs
    /*
    public Node cloneGraph(Node node) {
        if (node == null) {
            return null;
        }
        return cloneGraphHelper(node);
    }
    
    
    private Node cloneGraphHelper(Node node) {
        if (nodeMap.containsKey(node)) {
            return nodeMap.get(node);
        }
        
        Node copy = new Node(node.val);
        nodeMap.put(node, copy);
        for (Node n : node.neighbors) {
            copy.neighbors.add(cloneGraphHelper(n));
        }
        
        return copy;
    }
    */
}
