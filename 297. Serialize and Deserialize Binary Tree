/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        // root,left,right is the pattern of the string
        if (root == null) {
            return null;
        }
        return root.val + "," + serialize(root.left) + "," + serialize(root.right);
    }

    int pos = 0;
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        // check edge case when the string is null
        if (data == null) {
            return null;
        }
        String[] vals = data.split(",");
        return deserializeHelper(vals);
    }
    
    public TreeNode deserializeHelper(String[] vals) {
        if (vals[pos].equals("null")) {
            pos++;
            return null;
        }
        
        TreeNode node = new TreeNode(Integer.parseInt(vals[pos++]));
        node.left = deserializeHelper(vals);
        node.right = deserializeHelper(vals);
        return node;
    } 
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
