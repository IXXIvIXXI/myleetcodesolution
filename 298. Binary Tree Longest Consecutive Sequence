/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int longestConsecutive(TreeNode root) {
        int[] max = new int[1];
        longestHelper(root, 0, 0, max);
        return max[0];
    }
    
    private void longestHelper(TreeNode root, int count, int target, int[] max) {
        if (root == null) {
            return;
        } else if (root.val == target) {
            count++;
        } else {
            count = 1;
        }
        
        max[0] = Math.max(max[0], count);
        longestHelper(root.left, count, root.val + 1, max);
        longestHelper(root.right, count, root.val + 1, max);
    }
}
