class Solution {
    // binary search:
    //  find a middle point of the search which
    //  would be the size of each substring.
    //  
    //  sliding the window till the end. if we
    //  find a substring return and set our left
    //  boundry as mid + 1 or lower our size by
    //  setting the right boundry as mid - 1.
    public String longestDupSubstring(String s) {
        String ans = "";
        int left = 0;
        int right = s.length();
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            String potentialAns = getDuplicate(mid, s);
            if (potentialAns != null) {
                ans = potentialAns;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        
        return ans;
    }
    
    private String getDuplicate(int size, String s) {
        long h = hash(s.substring(0, size));
        Set<Long> hSet = new HashSet<>();
        hSet.add(h);
        
        long pow = 1;
        for (int i = 0; i < size - 1; i++) {
            pow *= 31;
        }
        
        for (int i = size; i < s.length(); i++) {
            h = nextHash(pow, h, s.charAt(i - size), s.charAt(i));
            if (!hSet.add(h)) return s.substring(i - size + 1, i + 1);
        }
        return null;
    }
    
    private long hash(String s){
        long h = 0;
        long a = 1;
        
		int n = s.length();
        for(int k=n;k>=1;k--){
            char ch = s.charAt(k-1);
            h += (ch - 'a' + 1) * a;
            a = (a*31);
        }
        
        return h;
    }
    
    private long nextHash(long pow,long hash,char left,char right){
        return (hash - (left - 'a' + 1) * pow) * 31 + (right - 'a' + 1);
    }
}
