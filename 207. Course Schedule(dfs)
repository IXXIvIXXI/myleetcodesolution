class Solution {
    Map<Integer, List<Integer>> adjacencyList = new HashMap<>();
    Set<Integer> visited = new HashSet<>();
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        for (int i = 0; i < numCourses; i++) {
            adjacencyList.put(i, new ArrayList<>());
        }
        
        for (int[] course : prerequisites) {
            int pre = course[1];
            int cur = course[0];
            adjacencyList.get(pre).add(cur);
        }
        
        for (int key : adjacencyList.keySet()) {
            if (dfs(key)) return false;
        }
        
        return true;
    }
    
    private boolean dfs(int node) {
        if (visited.contains(node)) {
            return true;
        } else if (adjacencyList.get(node).size() == 0) {
            return false;
        }
        
        visited.add(node);
        for (int nei : adjacencyList.get(node)) {
            if (dfs(nei)) return true;
        }
        visited.remove(node);
        adjacencyList.put(node, new ArrayList<>());
        return false;
    }
}
