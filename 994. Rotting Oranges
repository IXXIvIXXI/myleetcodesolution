class Solution {
    int[][] DIRS = { {-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    public int orangesRotting(int[][] grid) {
        // add rotten oranges level by level
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        
        int totalFresh = 0;
        int rows = grid.length, cols = grid[0].length;
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 2) {
                    q.offer(new Pair(i, j));
                } else if (grid[i][j] == 1) {
                    totalFresh++;
                }
            }
        }
        
        // add a deliminator to seperate each level
        q.offer(new Pair(-1, -1));
        int totalTime = -1;
        
        while (!q.isEmpty()) {
            Pair<Integer, Integer> curr = q.poll();
            int row = curr.getKey();
            int col = curr.getValue();
            
            if (row == -1) {
                totalTime++;
                if (!q.isEmpty()) {
                    q.offer(new Pair(-1, -1));
                }
            } else {
                for (int[] dir : DIRS) {
                    int newRow = row + dir[0];
                    int newCol = col + dir[1];
                    // check if its in range
                    if (newRow < 0 || newRow >= rows || newCol <0 || newCol >= cols) {
                        continue;
                    }
                    if (grid[newRow][newCol] == 1) {
                        grid[newRow][newCol] = 2;
                        q.offer(new Pair(newRow, newCol));
                        totalFresh--;
                    }
                }
            }
        }
        
        return totalFresh == 0 ? totalTime : -1;
    }
}
