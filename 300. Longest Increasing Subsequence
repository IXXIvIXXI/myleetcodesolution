class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);
        
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        
        int longest = 0;
        for (int length : dp) {
            longest = Math.max(longest, length);
        }
        
        return longest;
        /*
        ArrayList<Integer> subList = new ArrayList<>();
        subList.add(nums[0]);
        
        for(int i = 1; i < nums.length; i++) {
            if (nums[i] > subList.get(subList.size() - 1)) {
                subList.add(nums[i]);
            } else {
                int pos = binarySearch(subList, nums[i]);
                subList.set(pos, nums[i]);
            }
        }
        
        return subList.size();
    }
    
    private int binarySearch(ArrayList<Integer> subList, int num) {
        int left = 0;
        int right = subList.size() - 1;
        int mid = left + (right - left) / 2;
        
        while (left < right) {
            if (subList.get(mid) == num) {
                return mid;
            }
            
            if (subList.get(mid) > num) {
                right = mid;
            } else {
                left = mid + 1;
            }
            
            mid = left + (right - left) / 2;
        }
        
        return left;
    }
    */
    }
}
