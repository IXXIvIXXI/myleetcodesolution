class Data implements Comparable<Data> {
    int index;
    int i;
    int val;
    
    public Data(int index, int i, int val) {
        this.index = index;
        this.i = i;
        this.val = val;
    }
    
    public int compareTo(Data d) {
        return val - d.val;
    }
}

class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<Data> pq = new PriorityQueue<>();
        int end = Integer.MIN_VALUE;
        
        for (int i = 0; i < nums.size(); i++) {
            int cur = nums.get(i).get(0);
            end = Math.max(end, cur);
            pq.offer(new Data(i, 0, cur));
        }
        
        int[] res = new int[2];
        int len = Integer.MAX_VALUE;
        while (pq.size() == nums.size()) {
            Data cur = pq.poll();
            
            if (end - cur.val < len) {
                res[0] = cur.val;
                res[1] = end;
                len = end - cur.val;
            }
            
            if (cur.i + 1 >= nums.get(cur.index).size()) continue;
            int newVal = nums.get(cur.index).get(cur.i + 1);
            end = Math.max(end, newVal);
            pq.offer(new Data(cur.index, cur.i + 1, newVal));
        }
        
        return res;
    }
}
