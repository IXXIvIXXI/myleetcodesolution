class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        List<List<Integer>> li = new ArrayList<>();
        
        for (int i = 0; i < numCourses; i++) {
            li.add(new ArrayList<Integer>());
        }
        
        for (int[] prereq : prerequisites) {
            int pre = prereq[1];
            int cur = prereq[0];
            li.get(pre).add(cur);
            indegree[cur]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) q.add(i);
        }
        
        List<Integer> res = new ArrayList<>();
        while (!q.isEmpty()) {
            int cur = q.poll();
            res.add(cur);
            for (int course : li.get(cur)) {
                indegree[course]--;
                if (indegree[course] == 0) {
                    q.add(course);
                }
            }
        }
        if (res.size() < numCourses) return new int[0];
        int[] result = new int[res.size()];
        int i = 0;
        for (int num : res) {
            result[i] = num;
            i++;
        }
        
        return result;
    }
}
