class Solution {
    // apply binary search
    public int[] searchRange(int[] nums, int target) {
        int fstPos = search(nums, target, 0, nums.length - 1, true);
        if (fstPos == -1) return new int[]{fstPos, fstPos};
        int sndPos = search(nums, target, 0, nums.length - 1, false);
        return new int[]{fstPos, sndPos};
    }
    
    private int search(int[] nums, int target, int left, int right, boolean isFirst) {
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                if (isFirst) {
                    if (mid == left || nums[mid - 1] != target) {
                        return mid;
                    }
                    right = mid - 1;
                } else {
                    if (mid == right || nums[mid + 1] != target) {
                        return mid;
                    }
                    left = mid + 1;
                }
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return -1;
    }
}
