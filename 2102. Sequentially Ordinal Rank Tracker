class SORTracker {
    TreeSet<LocationNode> locations;
    LocationNode lastReturn;

    public SORTracker() {
        locations = new TreeSet<>();
        lastReturn = new LocationNode(null, Integer.MAX_VALUE);
    }
    
    public void add(String name, int score) {
        LocationNode node = new LocationNode(name, score);
        locations.add(node);
        
        // if node compareTo lastReturn is a negative value it means node comes before
        // the lastReturn we change the pointer to the previous item
        if (node.compareTo(lastReturn) < 0) lastReturn = locations.lower(lastReturn);
    }
    
    public String get() {
        // we return the name of the next item
        lastReturn = locations.higher(lastReturn);
        return lastReturn.name;
    }
}

class LocationNode implements Comparable<LocationNode> {
    String name;
    int score;
    
    public LocationNode(String name, int score) {
        this.name = name;
        this.score = score;
    }
    
    public int compareTo(LocationNode l) {
        return score != l.score ? -Integer.compare(score, l.score) : name.compareTo(l.name);
    }
}
/**
 * Your SORTracker object will be instantiated and called as such:
 * SORTracker obj = new SORTracker();
 * obj.add(name,score);
 * String param_2 = obj.get();
 */
