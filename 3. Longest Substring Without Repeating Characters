// sliding window problem
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int longest = 0;
        Set<Character> charSet = new HashSet<>();
        int start = 0;
        int end = 0;
        // end < s.length() would make sure we add all the characters to the set
        // no jumping character
        while (end < s.length()) {
            char currChar = s.charAt(end);
            if (!charSet.contains(currChar)) {
                end++;
                charSet.add(currChar);
                // update longest only when the curr character is not in the set
                longest = Math.max(charSet.size(), longest);
            } else {
                charSet.remove(s.charAt(start));
                start++;
            }
        }
        return longest;
    }
}
