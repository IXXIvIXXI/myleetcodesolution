class Solution {
    public int minMeetingRooms(int[][] intervals) {
        /*
        Arrays.sort(intervals, (a,b)->a[0] - b[0]);
        PriorityQueue<Integer> endTime = new PriorityQueue<>((a,b)->a - b);
        endTime.add(intervals[0][1]);
        
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] >= endTime.peek()) {
                endTime.poll();
            }
            endTime.add(intervals[i][1]);
        }
        return endTime.size();
        */
        
        int rooms = 0;
        int res = rooms;
        if (intervals.length == 0) {
            return rooms;
        }
        
        Arrays.sort(intervals, (a,b)->a[0] - b[0]);
        
        int length = intervals.length;
        int[] start = new int[length];
        int[] end = new int[length];
        
        for (int i = 0; i < length; i++) {
            start[i] = intervals[i][0];
            
        }
        
        Arrays.sort(intervals, (a,b)->a[1] - b[1]);
        for (int i = 0; i < length; i++) {
            end[i] = intervals[i][1];
        }
        
        Arrays.sort(start);
        Arrays.sort(end);
        
        int currStart = 0;
        int currEnd = 0;
        
        while (currStart < length) {
            if (start[currStart] < end[currEnd]) {
                rooms++;
                currStart++;
            } else {
                currEnd++;
                rooms--;
            }
            res = Math.max(res, rooms);
        }
        
        return res;
    }
}
