class Solution {
    HashMap<Integer, List<Integer>> courseMap;
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        courseMap = new HashMap<>();
        int[] indegree = new int[numCourses];
        for (int i = 0; i < prerequisites.length; i++) {
            int key = prerequisites[i][0];
            int val = prerequisites[i][1];
            if (!courseMap.keySet().contains(key)) {
                courseMap.put(key, new ArrayList<Integer>());
            }
            courseMap.get(key).add(val);
            indegree[val]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        
        while (!q.isEmpty()) {
            int currCourse = q.poll();
            if (courseMap.get(currCourse) != null) {
                List<Integer> courseList = courseMap.get(currCourse);
                for (int course : courseList) {
                    indegree[course]--;
                    if (indegree[course] == 0) {
                        q.add(course);
                    }
                }
            }
            numCourses--;
        }
        
        return numCourses == 0;
    }
