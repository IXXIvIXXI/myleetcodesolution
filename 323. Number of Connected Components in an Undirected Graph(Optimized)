class Solution {
    List<List<Integer>> adjacencyList;
    int[] visited;
    public int countComponents(int n, int[][] edges) {
        adjacencyList = new ArrayList<>();
        visited = new int[n];
        for (int i = 0; i < n; i++) {
            adjacencyList.add(new ArrayList<Integer>());
            visited[i] = 0;
        }
        
        for (int[] edge : edges) {
            adjacencyList.get(edge[0]).add(edge[1]);
            adjacencyList.get(edge[1]).add(edge[0]);
        }
        
        
        int total = 0;
        for (int i = 0; i < n; i++) {
            if (visited[i] != 1) {
                total++;
                dfs(i);
            }
        }
        return total;
    }
    
    private void dfs(int n) {
        visited[n] = 1;
        
        for (int nei : adjacencyList.get(n)) {
            if (visited[nei] == 0) {
                dfs(nei);
            }
        }
    }
}
